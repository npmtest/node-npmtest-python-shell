{"/home/travis/build/npmtest/node-npmtest-python-shell/test.js":"/* istanbul instrument in package npmtest_python_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-python-shell/lib.npmtest_python_shell.js":"/* istanbul instrument in package npmtest_python_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_python_shell = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_python_shell = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-python-shell/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-python-shell && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_python_shell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_python_shell\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_python_shell.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_python_shell.rollup.js'] =\n            local.assetsDict['/assets.npmtest_python_shell.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_python_shell.__dirname + '/lib.npmtest_python_shell.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-python-shell/node_modules/python-shell/index.js":"var EventEmitter = require('events').EventEmitter;\nvar path = require('path');\nvar util = require('util');\nvar spawn = require('child_process').spawn;\n\nfunction toArray(source) {\n    if (typeof source === 'undefined' || source === null) {\n        return [];\n    } else if (!Array.isArray(source)) {\n        return [source];\n    }\n    return source;\n}\n\nfunction extend(obj) {\n    Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n        if (source) {\n            for (var key in source) {\n                obj[key] = source[key];\n            }\n        }\n    });\n    return obj;\n}\n\n/**\n * An interactive Python shell exchanging data through stdio\n * @param {string} script    The python script to execute\n * @param {object} [options] The launch options (also passed to child_process.spawn)\n * @constructor\n */\nvar PythonShell = function (script, options) {\n\n    function resolve(type, val) {\n        if (typeof val === 'string') {\n            // use a built-in function using its name\n            return PythonShell[type][val];\n        } else if (typeof val === 'function') {\n            // use a custom function\n            return val;\n        }\n    }\n\n    var self = this;\n    var errorData = '';\n    EventEmitter.call(this);\n\n    options = extend({}, PythonShell.defaultOptions, options);\n    var pythonPath = options.pythonPath || 'python';\n    var pythonOptions = toArray(options.pythonOptions);\n    var scriptArgs = toArray(options.args);\n\n    this.script = path.join(options.scriptPath || './', script);\n    this.command = pythonOptions.concat(this.script, scriptArgs);\n    this.mode = options.mode || 'text';\n    this.formatter = resolve('format', options.formatter || this.mode);\n    this.parser = resolve('parse', options.parser || this.mode);\n    this.terminated = false;\n    this.childProcess = spawn(pythonPath, this.command, options);\n\n    ['stdout', 'stdin', 'stderr'].forEach(function (name) {\n        self[name] = self.childProcess[name];\n        self.parser && self[name].setEncoding(options.encoding || 'utf8');\n    });\n\n    // parse incoming data on stdout\n    if (this.parser) {\n        this.stdout.on('data', PythonShell.prototype.receive.bind(this));\n    }\n\n    // listen to stderr and emit errors for incoming data\n    this.stderr.on('data', function (data) {\n        errorData += ''+data;\n    });\n\n    this.stderr.on('end', function(){\n        self.stderrHasEnded = true\n        terminateIfNeeded();\n    })\n\n    this.stdout.on('end', function(){\n        self.stdoutHasEnded = true\n        terminateIfNeeded();\n    })\n\n    this.childProcess.on('exit', function (code) {\n        self.exitCode = code;\n        terminateIfNeeded();\n    });\n\n    function terminateIfNeeded() {\n        if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null) {\n            return;\n        }\n        var err;\n        if (errorData || self.exitCode !== 0) {\n            if (errorData) {\n                err = self.parseError(errorData);\n            } else {\n                err = new Error('process exited with code ' + self.exitCode);\n            }\n            err = extend(err, {\n                executable: pythonPath,\n                options: pythonOptions.length ? pythonOptions : null,\n                script: self.script,\n                args: scriptArgs.length ? scriptArgs : null,\n                exitCode: self.exitCode\n            });\n            // do not emit error if only a callback is used\n            if (self.listeners('error').length || !self._endCallback) {\n                self.emit('error', err);\n            }\n        }\n        self.terminated = true;\n        self.emit('close');\n        self._endCallback && self._endCallback(err);\n    }\n};\nutil.inherits(PythonShell, EventEmitter);\n\n// allow global overrides for options\nPythonShell.defaultOptions = {};\n\n// built-in formatters\nPythonShell.format = {\n    text: function toText(data) {\n        if (!data) return '';\n        else if (typeof data !== 'string') return data.toString();\n        return data;\n    },\n    json: function toJson(data) {\n        return JSON.stringify(data);\n    }\n};\n\n// built-in parsers\nPythonShell.parse = {\n    text: function asText(data) {\n        return data;\n    },\n    json: function asJson(data) {\n        return JSON.parse(data);\n    }\n};\n\n/**\n * Runs a Python script and returns collected messages\n * @param  {string}   script   The script to execute\n * @param  {Object}   options  The execution options\n * @param  {Function} callback The callback function to invoke with the script results\n * @return {PythonShell}       The PythonShell instance\n */\nPythonShell.run = function (script, options, callback) {\n    if (typeof options === 'function') {\n        callback = options;\n        options = null;\n    }\n\n    var pyshell = new PythonShell(script, options);\n    var output = [];\n\n    return pyshell.on('message', function (message) {\n        output.push(message);\n    }).end(function (err) {\n        if (err) return callback(err);\n        return callback(null, output.length ? output : null);\n    });\n};\n\n/**\n * Parses an error thrown from the Python process through stderr\n * @param  {string|Buffer} data The stderr contents to parse\n * @return {Error} The parsed error with extended stack trace when traceback is available\n */\nPythonShell.prototype.parseError = function (data) {\n    var text = ''+data;\n    var error;\n\n    if (/^Traceback/.test(text)) {\n        // traceback data is available\n        var lines = (''+data).trim().split(/\\n/g);\n        var exception = lines.pop();\n        error = new Error(exception);\n        error.traceback = data;\n        // extend stack trace\n        error.stack += '\\n    ----- Python Traceback -----\\n  ';\n        error.stack += lines.slice(1).join('\\n  ');\n    } else {\n        // otherwise, create a simpler error with stderr contents\n        error = new Error(text);\n    }\n\n    return error;\n};\n\n/**\n * Sends a message to the Python shell through stdin\n * Override this method to format data to be sent to the Python process\n * @param {string|Object} data The message to send\n * @returns {PythonShell} The same instance for chaining calls\n */\nPythonShell.prototype.send = function (message) {\n    var data = this.formatter ? this.formatter(message) : message;\n    if (this.mode !== 'binary') data += '\\n';\n    this.stdin.write(data);\n    return this;\n};\n\n/**\n * Parses data received from the Python shell stdout stream and emits \"message\" events\n * This method is not used in binary mode\n * Override this method to parse incoming data from the Python process into messages\n * @param {string|Buffer} data The data to parse into messages\n */\nPythonShell.prototype.receive = function (data) {\n    var self = this;\n    var parts = (''+data).split(/\\n/g);\n\n    if (parts.length === 1) {\n        // an incomplete record, keep buffering\n        this._remaining = (this._remaining || '') + parts[0];\n        return this;\n    }\n\n    var lastLine = parts.pop();\n    // fix the first line with the remaining from the previous iteration of 'receive'\n    parts[0] = (this._remaining || '') + parts[0];\n    // keep the remaining for the next iteration of 'receive'\n    this._remaining = lastLine;\n\n    parts.forEach(function (part) {\n        self.emit('message', self.parser(part));\n    });\n\n    return this;\n};\n\n/**\n * Closes the stdin stream, which should cause the process to finish its work and close\n * @returns {PythonShell} The same instance for chaining calls\n */\nPythonShell.prototype.end = function (callback) {\n    this.childProcess.stdin.end();\n    this._endCallback = callback;\n    return this;\n};\n\nmodule.exports = PythonShell;\n"}